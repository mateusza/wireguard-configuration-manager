#!/bin/bash

[[ -z "$WG_DIR" ]] && WG_DIR=/etc/wireguard

_main () {
    argv0="$1"
    shift

    cmd="$1"
    shift

    case "$cmd" in
        "")
            _usage "${argv0}"
            ;;
        list)
            _list_interfaces
            ;;
        write-conf)
            _write_conf "$@"
            ;;
        show_conf)
            _show_conf "$@"
            ;;
        qr)
            _show_qr "$@"
            ;;
        __*)
            "$cmd" "$@"
            ;;
    esac
}

_usage () {
    echo "$1: CMD"
}

_list_interfaces () {
    local iface
    for iface in $( __list_interfaces ); do
        printf "%s: (%s) %d peers\n" "$iface" "$(__iface_conf_address "$iface")" "$( __iface_count_peers "$iface" )"
    done
}

_write_conf () {
    local iface iface2 iface_dir
    iface2="$1"

    for iface in $(__list_interfaces); do
        echo "Found interface: $iface"
        [[ -n "$iface2" && "$iface" != "$iface2" ]] && continue
        iface_dir="$(__iface_dirname "$iface" )"
        umask 077
        {
            printf "# Do not edit this file. It's generated automatically.\n\n"
            __iface_conf "$iface" 
        } > "$iface_dir/interface.conf"
        echo "Saved."
    done

}

_show_conf () {
    local iface peer
    iface="$1"
    peer="$2"
    if [[ -z "$peer" ]]; then
        if __iface_exists "$iface"; then
            __iface_conf "$iface"
        else
            printf "Interface not found: %s\n" "$iface"
            false
        fi
    else
        if __peer_exists "$iface" "$peer"; then
            __peer_remoteconf "$iface" "$peer"
        else
            printf "Peer not found: %s\n" "$peer"
            false
        fi
    fi
}

_show_qr () {
    local iface peer
    iface="$1"
    peer="$2"
    if ! type -P qrencode > /dev/null; then
        echo "Command not found: qrencode"
        false
    fi
    if __peer_exists "$iface" "$peer"; then
        printf "[ QR CODE %s %s ]\n" "$iface" "$peer"
        __peer_remoteconf "$iface" "$peer" | sed -ne 's/#.*//;/^.\+$/p' | qrencode -t UTF8
    else
        printf "Peer not found: %s\n" "$peer"
    fi
}

# Common functions:

__conf_address_file() {
    local filename
    filename="$1"
    while read -r line; do
        [[ -z "$line" ]] && continue
        [[ "x${line:0:1}" == "x#" ]] && continue
        printf "%s\n" "$line"
    done < "$filename"
}

# Peer related functions

__peer_exists() {
    local iface peer peer_dirname
    iface="$1"
    peer="$2"
    peer_dirname=$(__peer_dirname "$iface" "$peer")
    test -d "$peer_dirname" && test -n "$peer"
}

__peer_dirname () {
    local iface peer
    iface="$1"
    peer="$2"
    printf "%s/peers.d/%s\n" "$(__iface_dirname "$iface")" "$peer"
}

__peer_conf_address () {
    local iface peer ips line
    iface="$1"
    peer="$2"
    __conf_address_file "$(__peer_dirname "$iface" "$peer")/ip.conf"
}

__peer_conf_networks () {
    local iface peer ips line peer_dirname
    iface="$1"
    peer="$2"
    peer_dirname="$(__peer_dirname "$iface" "$peer")"
    ips=""
    [[ -e "${peer_dirname}/networks.conf" ]] || return
    __conf_address_file "${peer_dirname}/networks.conf"
}

__peer_conf_allowedips () {
    local iface peer ips ip
    iface="$1"
    peer="$2"
    ips=""
    for ip in $( __peer_conf_address "$iface" "$peer" ) $( __peer_conf_networks "$iface" "$peer" ); do
        printf -v ips "%s, %s" "$ips" "$ip"
    done
    ips="${ips##, }"
    printf "%s\n" "$ips"
}

__peer_conf_myips () {
    local iface peer ips ip
    iface="$1"
    peer="$2"
    ips=""
    for ip in $(__peer_conf_address "$iface" "$peer"); do
        printf -v ips "%s, %s" "$ips" "$ip"
    done
    ips="${ips##, }"
    printf "%s\n" "$ips"
}

__peer_conf_dns () {
    local iface peer ips ip
    iface="$1"
    peer="$2"
    ips=""
    for ip in $(__peer_conf_dns_ips "$iface" "$peer"); do
        printf -v ips "%s, %s" "$ips" "$ip"
    done
    ips="${ips##, }"
    printf "%s\n" "$ips"
}

__peer_conf_dns_ips () {
    local iface peer peer_dirname
    iface="$1"
    peer="$2"
    peer_dirname="$(__peer_dirname "$iface" "$peer")"
    if [[ -e "${peer_dirname}/dns.conf" ]]; then
        __conf_address_file "${peer_dirname}/dns.conf"
    else
        __iface_conf_dns_ips "$iface"
    fi
}

__peer_conf_privatekey () {
    local iface peer privkey line filename
    iface="$1"
    peer="$2"
    peer_dirname="$(__peer_dirname "$iface" "$peer")"
    filename="${peer_dirname}/private.key"
    if [[ -e "${filename}" ]]; then
        read -r privkey < "${filename}"
    else
        privkey="# PRIVATE KEY HERE"
    fi
    printf "%s\n" "$privkey"
}

__peer_conf_publickey () {
    local iface peer pubkey privkey filename
    iface="$1"
    peer="$2"
    filename="$(__peer_dirname "$iface" "$peer")/public.key"
    if [[ -e "$filename" ]]; then
        read -r pubkey < "${filename}"
    else
        privkey="$(__peer_conf_privatekey "$iface" "$peer")"
        if [[ "x${privkey:0:1}" == "x#" ]]; then
            pubkey="# PUBLIC KEY HERE"
        else
            pubkey="$(echo "$privkey" | wg pubkey)"
        fi
    fi
    printf "%s\n" "$pubkey"
}

__peer_conf () {
    local iface peer publickey
    iface="$1"
    peer="$2"
    publickey="$(__peer_conf_publickey "$iface" "$peer")"
    printf "[Peer] # %s\n" "$peer"
    printf "%sPublicKey = %s\n" "$([[ "x${publickey:0:1}" == "x#" ]] && echo "# ")" "${publickey}"
    printf "AllowedIPs = %s\n" "$(__peer_conf_allowedips "$iface" "$peer")"
}

__peer_remoteconf () {
    local iface peer networks n
    iface="$1"
    peer="$2"
    printf "[Interface]\n"
    printf "DNS = %s\n" "$(__peer_conf_dns "$iface" "$peer" )"
    printf "Address = %s\n" "$(__peer_conf_myips "$iface" "$peer" )"
    printf "PrivateKey = %s\n" "$(__peer_conf_privatekey "$iface" "$peer")"
    printf "# PubKey = %s\n" "$(__peer_conf_publickey "$iface" "$peer")"
    printf "\n"
    printf "[Peer] # %s\n" "$HOSTNAME" # FIXME
    printf "PublicKey = %s\n" "$( __iface_conf_publickey "$iface" )"
    printf "AllowedIPs = %s\n" "$(__iface_conf_allowedips "$iface" )"
    printf "# AllowedIPs = 0.0.0.0/0, ::/0\n"
    printf "Endpoint = %s:%d\n" "$(__iface_conf_endpoint "$iface")" "$(__iface_conf_listenport "$iface")"
    printf "PersistentKeepalive = %d\n" "60"
    networks="$(__peer_conf_networks "$iface" "$peer")"
    if [[ -n "$networks" ]]; then
        printf "\n"
        printf "# Networks to use locally:\n"
        for n in $networks; do
            printf "# - %s\n" "$n"
        done
    fi
}

# Interface related functions

__iface_exists() {
    local iface iface_dirname
    iface="$1"
    iface_dirname=$(__iface_dirname "$iface" )
    test -e "$iface_dirname"
}

__iface_dirname () {
    local iface
    iface="$1"
    printf "%s/%s.conf.d\n" "$WG_DIR" "$iface"
}

__iface_count_peers () {
    local iface peer n
    iface="$1"
    n=0
    for peer in $( __list_peers "$iface" ); do
        n=$(( n + 1 ))
    done
    printf "%d\n" "$n"
}

__iface_conf () {
    local iface
    iface="$1"
    printf "[Interface] # %s\n" "$iface"
    __iface_conf_local "$iface"
    printf "\n"
    __iface_conf_peers "$iface"
    printf "# EOF\n"
}

__iface_conf_local () {
    local iface net
    iface="$1"
    printf "Address = %s\n" "$( __iface_conf_address "$iface" )"
    printf "ListenPort = %d\n" "$( __iface_conf_listenport "$iface" )"
    printf "FwMark = %s\n" "$( __iface_conf_fwmark "$iface" )"
    printf "PrivateKey = %s\n" "$( __iface_conf_privatekey "$iface" )"
    printf "# PublicKey = %s\n" "$( __iface_conf_publickey "$iface" )"
    printf "# Local networks:\n"
    for net in $(__iface_conf_networks "$iface" ); do
        printf "# - %s\n" "$net"
    done
}

__iface_conf_address () {
    local iface iface_dirname line
    iface="$1"
    iface_dirname="$(__iface_dirname "$iface")"
    ips=""
    while read -r line; do
        printf -v ips "%s, %s" "$ips" "$line"
    done < "${iface_dirname}/ip.conf"
    ips="${ips##, }"
    printf "%s\n" "$ips"
}

__iface_conf_networks () {
    local iface iface_dirname
    iface="$1"
    iface_dirname="$(__iface_dirname "$iface")"
    __conf_address_file "${iface_dirname}/networks.conf"
}

__iface_conf_dns_ips () {
    local iface iface_dirname
    iface="$1"
    iface_dirname="$(__iface_dirname "$iface")"
    __conf_address_file "${iface_dirname}/dns.conf"
}

__iface_conf_allowedips () {
    local iface ips ip
    iface="$1"
    ips=""
    for ip in $( __iface_conf_networks "$iface" ); do
        printf -v ips "%s, %s" "$ips" "$ip"
    done
    ips="${ips##, }"
    printf "%s\n" "$ips"
}

__iface_conf_endpoint () {
    local iface endpoint
    iface="$1"
    read -r endpoint < "$(__iface_dirname "$iface" )/endpoint.conf"
    printf "%s\n" "$endpoint"
}

__iface_conf_listenport () {
    local iface lport filename
    iface="$1"
    filename="$(__iface_dirname "$iface" )/port.conf"
    if [[ -e "$filename" ]]; then
        read -r lport < "$filename"
    else
        lport="51820"
    fi
    printf "%d\n" "$lport"
}

__iface_conf_fwmark () {
    local iface fwmark filename
    iface="$1"
    filename="$(__iface_dirname "$iface" )/fwmark.conf"
    if [[ -e "$filename" ]]; then
        read -r fwmark < "$filename"
    else
        fwmark="0xca6c"
    fi
    printf "%s\n" "$fwmark"
}

__iface_conf_privatekey () {
    local iface privkey
    iface="$1"
    read -r privkey < "$(__iface_dirname "$iface" )/private.key"
    printf "%s\n" "$privkey"
}

__iface_conf_publickey () {
    local iface iface_dirname pubkey
    iface="$1"
    iface_dirname="$(__iface_dirname "$iface")"
    if [[ -e "${iface_dirname}/public.key" ]]; then
        read -r pubkey < "${iface_dirname}/public.key"
        printf "%s\n" "$pubkey"
    else
        wg pubkey < "${iface_dirname}/private.key"
    fi
}

__iface_conf_peers () {
    local iface peer
    iface="$1"
    for peer in $( __list_peers "$iface" ); do
        __peer_conf "$iface" "$peer"
        printf "\n"
    done
}

__list_interfaces () {
    local iface_dirname iface

    for iface_dirname in "$WG_DIR"/*.conf.d; do
        [[ -d "$iface_dirname" ]] || break
        iface="${iface_dirname}"
        iface="${iface##${WG_DIR}/}"
        iface="${iface%%.conf.d}"
        printf "%s\n" "$iface"
    done
}

__list_peers () {
    local iface iface_dirname peer_dirname peer
    iface="$1"
    iface_dirname="$(__iface_dirname "$iface" )"

    for peer_dirname in "${iface_dirname}"/peers.d/*; do
        [[ -d "$peer_dirname" ]] || break
        peer="${peer_dirname}"
        peer="${peer##${iface_dirname}/peers.d/}"
        printf "%s\n" "$peer"
    done
}

__list_connections () {
    local iface peer
    for iface in $(__list_interfaces); do
        __iface_exists "$iface" || break
        for peer in $(__list_peers "$iface" ); do
            __peer_exists "$iface" "$peer" || break
            printf "%s %s\n" "$iface" "$peer"
        done
    done
}

set -e

_main "$0" "$@"

